{"ast":null,"code":"import axios from \"axios\";\nimport LoadingPage from \"../components/LoadingPage.vue\";\nimport SliderPage from \"./SliderPage.vue\";\nexport default {\n  name: \"chatgptUI\",\n  components: {\n    LoadingPage,\n    SliderPage\n  },\n  data() {\n    return {\n      error: \"\",\n      prompt: \"\",\n      spinner: false,\n      // prompt: \"Annaba city at night\",\n      size: \"small\",\n      howmany: 1,\n      imageUrl: null\n    };\n  },\n  methods: {\n    obj2array(obj) {\n      // return obj.values();\n      return Object.values(obj);\n    },\n    ClearImage() {\n      this.imageUrl = null;\n      this.error = \"\";\n      this.spinner = false;\n    },\n    async generateImage() {\n      this.imageUrl = null;\n      this.error = \"\";\n      this.spinner = true;\n      const imageSize = this.size === \"small\" ? \"256x256\" : this.size === \"medium\" ? \"512x512\" : \"1024x1024\";\n      try {\n        const response = await axios.post(\"https://api.openai.com/v1/images/generations\", {\n          model: \"image-alpha-001\",\n          prompt: this.prompt,\n          size: imageSize,\n          n: parseInt(this.howmany),\n          response_format: \"url\"\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${process.env.VUE_APP_OPENAI_API_KEY}` // Replace with your OpenAI API key\n          }\n        });\n\n        this.imageUrl = response.data;\n        this.spinner = false;\n      } catch (error) {\n        console.error(error.response.status);\n        this.spinner = false;\n        // if (error.response.status == \"400\") {\n        //     }\n        this.error = error.response.data.error.message;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","LoadingPage","SliderPage","name","components","data","error","prompt","spinner","size","howmany","imageUrl","methods","obj2array","obj","Object","values","ClearImage","generateImage","imageSize","response","post","model","n","parseInt","response_format","headers","Authorization","process","env","VUE_APP_OPENAI_API_KEY","console","status","message"],"sources":["/Users/mac/Desktop/Vue3-openai-image-generator/src/components/chatgptUI.vue"],"sourcesContent":["<template>\n    <div class=\"error\" v-if=\"error\">{{ error }}</div>\n    <main class=\"main\">\n        <section class=\"showcase\">\n            <form @submit.prevent id=\"image-form\" class=\"form-class\">\n                <h1>Describe An Image</h1>\n                <div class=\"form-control\">\n                    <input\n                        type=\"text\"\n                        id=\"prompt\"\n                        v-model=\"prompt\"\n                        placeholder=\"Enter Text\"\n                    />\n                    <!-- <button @click='prompt=\"\"'>x</button> -->\n                </div>\n                <!-- size -->\n                <div class=\"form-control\">\n                    <select name=\"size\" id=\"size\" v-model=\"size\">\n                        <option value=\"small\" selected>Small (256x256)</option>\n                        <option value=\"medium\">Medium (512x512)</option>\n                        <option value=\"large\">Large (1024x1024)</option>\n                    </select>\n                </div>\n                <!-- size -->\n                <div class=\"form-control\">\n                    <select name=\"howmany\" id=\"howmany\" v-model=\"howmany\">\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                    </select>\n                </div>\n                <div class=\"flex-container\">\n                    <button @click=\"generateImage\" class=\"btn\">Generate</button>\n                    <button @click=\"ClearImage\" class=\"btn red\">Clear</button>\n                </div>\n            </form>\n        </section>\n        <section>\n            <slider-page\n                width=\"40\"\n                v-if=\"false\"\n                :items=\"Object.values(imageUrl)\"\n            />\n            <loading-page v-show=\"spinner\" :spaceT=\"10\" :spaceB=\"10\" />\n            <div v-show=\"!spinner\" class=\"flex\" v-if=\"imageUrl\">\n                <img\n                    v-for=\"(image, index) in imageUrl.data\"\n                    :key=\"index\"\n                    :src=\"image.url\"\n                    :alt=\"image.url\"\n                />\n            </div>\n        </section>\n    </main>\n</template>\n<script>\nimport axios from \"axios\";\n\nimport LoadingPage from \"../components/LoadingPage.vue\";\nimport SliderPage from \"./SliderPage.vue\";\nexport default {\n    name: \"chatgptUI\",\n    components: {\n        LoadingPage,\n        SliderPage,\n    },\n    data() {\n        return {\n            error: \"\",\n            prompt: \"\",\n            spinner: false,\n            // prompt: \"Annaba city at night\",\n            size: \"small\",\n            howmany: 1,\n            imageUrl: null,\n        };\n    },\n    methods: {\n        obj2array(obj) {\n            // return obj.values();\n            return Object.values(obj);\n        },\n        ClearImage() {\n            this.imageUrl = null;\n            this.error = \"\";\n            this.spinner = false;\n        },\n        async generateImage() {\n            this.imageUrl = null;\n            this.error = \"\";\n            this.spinner = true;\n            const imageSize =\n                this.size === \"small\"\n                    ? \"256x256\"\n                    : this.size === \"medium\"\n                    ? \"512x512\"\n                    : \"1024x1024\";\n            try {\n                const response = await axios.post(\n                    \"https://api.openai.com/v1/images/generations\",\n                    {\n                        model: \"image-alpha-001\",\n                        prompt: this.prompt,\n                        size: imageSize,\n                        n: parseInt(this.howmany),\n                        response_format: \"url\",\n                    },\n                    {\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Authorization: `Bearer ${process.env.VUE_APP_OPENAI_API_KEY}`, // Replace with your OpenAI API key\n                        },\n                    }\n                );\n                this.imageUrl = response.data;\n\n                this.spinner = false;\n            } catch (error) {\n                console.error(error.response.status);\n                this.spinner = false;\n                // if (error.response.status == \"400\") {\n                //     }\n                    this.error = error.response.data.error.message;\n            }\n        },\n    },\n};\n</script>\n\n<style scoped>\n.main {\n    padding-bottom: 50px;\n    background: var(--primary-color);\n}\n.form-control {\n    display: flex;\n    align-items: center;\n    /* justify-content: center; */\n    flex-direction: column;\n}\n.showcase h1 {\n    color: #fff;\n}\n.form-class {\n    padding: 20;\n    color: rgb(85, 0, 255);\n}\n.red {\n    color: #f00;\n}\n.error {\n    background-color: #ff0000;\n    color: #fff;\n    text-align: center;\n    font-weight: 600;\n    line-height: 75px;\n    font-size: 30px;\n}\n.flex-container {\n    display: flex;\n    flex-wrap: nowrap;\n    /* background-color: DodgerBlue; */\n}\n.flex-container > div {\n    /* background-color: #f1f1f1; */\n    width: 100px;\n    margin: 10px;\n    text-align: center;\n    line-height: 75px;\n    font-size: 30px;\n}\n\n.flex {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-flow: wrap;\n    width: 100%;\n    padding: 60px;\n    background-color: var(--primary-color);\n}\n</style>\n"],"mappings":"AA0DA,OAAOA,KAAI,MAAO,OAAO;AAEzB,OAAOC,WAAU,MAAO,+BAA+B;AACvD,OAAOC,UAAS,MAAO,kBAAkB;AACzC,eAAe;EACXC,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAE;IACRH,WAAW;IACXC;EACJ,CAAC;EACDG,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,KAAK;MACd;MACAC,IAAI,EAAE,OAAO;MACbC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,SAASA,CAACC,GAAG,EAAE;MACX;MACA,OAAOC,MAAM,CAACC,MAAM,CAACF,GAAG,CAAC;IAC7B,CAAC;IACDG,UAAUA,CAAA,EAAG;MACT,IAAI,CAACN,QAAO,GAAI,IAAI;MACpB,IAAI,CAACL,KAAI,GAAI,EAAE;MACf,IAAI,CAACE,OAAM,GAAI,KAAK;IACxB,CAAC;IACD,MAAMU,aAAaA,CAAA,EAAG;MAClB,IAAI,CAACP,QAAO,GAAI,IAAI;MACpB,IAAI,CAACL,KAAI,GAAI,EAAE;MACf,IAAI,CAACE,OAAM,GAAI,IAAI;MACnB,MAAMW,SAAQ,GACV,IAAI,CAACV,IAAG,KAAM,OAAM,GACd,SAAQ,GACR,IAAI,CAACA,IAAG,KAAM,QAAO,GACrB,SAAQ,GACR,WAAW;MACrB,IAAI;QACA,MAAMW,QAAO,GAAI,MAAMpB,KAAK,CAACqB,IAAI,CAC7B,8CAA8C,EAC9C;UACIC,KAAK,EAAE,iBAAiB;UACxBf,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBE,IAAI,EAAEU,SAAS;UACfI,CAAC,EAAEC,QAAQ,CAAC,IAAI,CAACd,OAAO,CAAC;UACzBe,eAAe,EAAE;QACrB,CAAC,EACD;UACIC,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,sBAAuB,EAAC,CAAE;UACnE;QACJ,EACH;;QACD,IAAI,CAACnB,QAAO,GAAIS,QAAQ,CAACf,IAAI;QAE7B,IAAI,CAACG,OAAM,GAAI,KAAK;MACxB,EAAE,OAAOF,KAAK,EAAE;QACZyB,OAAO,CAACzB,KAAK,CAACA,KAAK,CAACc,QAAQ,CAACY,MAAM,CAAC;QACpC,IAAI,CAACxB,OAAM,GAAI,KAAK;QACpB;QACA;QACI,IAAI,CAACF,KAAI,GAAIA,KAAK,CAACc,QAAQ,CAACf,IAAI,CAACC,KAAK,CAAC2B,OAAO;MACtD;IACJ;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}